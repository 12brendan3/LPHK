##TODO - Make killable delay lib (for tap)
##TODO - Add SIMPLE async macro
# All variables ignored except for IMPORTS and F
IMPORTS = ['kb']
F = dict()

# --------- Function to press (and not release) a key. ---------
F['PRESS'] = dict()

def press_verify(args):
    # Check number of arguments
    if len(args) != 1:
        return "PRESS takes exactly 1 argument. [key]"
    # Check if key name is valid
    if kb.sp(args[0]) == None:
        return "No key named '{}'".format(args[0])
    return True
F['PRESS']['verify'] = press_verify

def press_run(args):
    key = kb.sp(args[0])
    kb.press(key)
F['PRESS']['run'] = press_run
# --------------------------------------------------------------


# --------- Function to release (but not press) a key. ---------
F['RELEASE'] = dict()

def release_verify(args):
    # Check number of arguments
    if len(args) != 1:
        return "RELEASE takes exactly 1 argument. [key]"
    # Check if key name is valid
    if kb.sp(args[0]) == None:
        return "No key named '{}'".format(args[0])
    return True
F['RELEASE']['verify'] = release_verify 

def release_run(args):
    key = kb.sp(args[0])
    kb.release(key)
F['RELEASE']['run'] = release_run
# --------------------------------------------------------------


# ------------------- Function to tap a key. -------------------
F['TAP'] = dict()

def tap_verify(args):
    # Check number of arguments
    if (len(args) < 1) or (len(args) > 3):
        return "TAP takes 1-3 arguments. [key, (repeat), (delay)]"
    # Check if key name is valid
    if kb.sp(args[0]) == None:
        return "No key named '{}'".format(args[0])
    # Check if repeats are valid
    if len(args) >= 2:
        try:
            temp = int(args[1])
            if temp < 1:
                return "TAP number of repeats must be at least 1."
        except:
            return "TAP number of repeats must be a valid decimal integer."
    # Check if delay is valid
    if len(args) >= 3:
        try:
            temp = float(args[2])
            if temp < 0.0:
                return "TAP delay time must be larger than 0."
        except:
            return "TAP delay time must be a valid decimal number."
    return True
F['TAP']['verify'] = tap_verify

def tap_run(args):
    key = kb.sp(args[0])
    if len(args) == 1:
        kb.tap(key)
    elif len(args) >= 2: 
        taps = int(args[1])
        delay = None
        if len(args) == 3:
            delay = float(args[2])
        for tap in range(taps):
            kb.press(key)
            if delay != None:
                pass#KILLABLE DELAY HERE
            kb.release(key)
F['TAP']['run'] = tap_run
# --------------------------------------------------------------


# ----------------- Function to type a string. -----------------
F['STRING'] = dict()

def string_verify(args):
    # STRING always types literally what comes after it, so no wrong inputs.
    return True
F['STRING']['verify'] = string_verify

def string_run(args):
    type_string = " ".join(args)
    kb.keyboard.write(type_string)
F['STRING']['run'] = string_run
# --------------------------------------------------------------


# ---------------- Function to release all keys. ---------------
F['RELEASE_ALL'] = dict()

def ra_verify(args):
    if len(args) > 0:
        return "RELEASE_ALL takes no arguments."
    return True
F['RELEASE_ALL']['verify'] = ra_verify

def ra_run(args):
    kb.release_all()
F['RELEASE_ALL']['run'] = ra_run
# --------------------------------------------------------------